---
export interface Props {
  sheets: string[];
  classesBySheet: { [key: string]: string[] };
}

const { sheets, classesBySheet } = Astro.props;
---

<div class="max-w-4xl mx-auto">
  <div class="bg-slate-800/60 backdrop-blur-sm rounded-2xl p-8 shadow-2xl border border-slate-600/50">
    <form id="timetable-form" class="space-y-8">
      <div class="space-y-3">
        <label for="sheet-select" class="block text-xl font-semibold text-slate-200">
          Select Category (Branch)
        </label>
        <select
          id="sheet-select"
          name="sheet"
          class="w-full px-6 py-4 bg-slate-700/80 border border-slate-500 rounded-xl text-white text-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 hover:bg-slate-700"
          required
        >
          <option value="">-- Choose a Category --</option>
          {sheets.map(sheet => (
            <option value={sheet}>{sheet}</option>
          ))}
        </select>
      </div>

      <div class="space-y-3">
        <label for="class-select" class="block text-xl font-semibold text-slate-200">
          Select Class (Section)
        </label>
        <select
          id="class-select"
          name="class"
          class="w-full px-6 py-4 bg-slate-700/80 border border-slate-500 rounded-xl text-white text-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 hover:bg-slate-700"
          required
          disabled
        >
          <option value="">-- First Select a Category --</option>
        </select>
      </div>

      <div class="flex flex-col sm:flex-row gap-4">
        <button
          type="submit"
          class="flex-1 px-8 py-4 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-500 hover:to-blue-600 text-white font-semibold text-lg rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105"
        >
          View Timetable
        </button>
        <button
          type="button"
          id="save-class-btn"
          class="flex-1 px-8 py-4 bg-gradient-to-r from-slate-600 to-slate-700 hover:from-slate-500 hover:to-slate-600 text-white font-semibold text-lg rounded-xl transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105"
        >
          Save for Later
        </button>
      </div>
    </form>
  </div>

  <div id="saved-timetables" class="mt-12">
    <h3 class="text-2xl font-bold bg-gradient-to-r from-slate-300 to-slate-100 bg-clip-text text-transparent mb-8 text-center">
      Your Saved Timetables
    </h3>
    <div id="saved-list" class="space-y-3"></div>
    <div id="no-saved-message" class="text-center text-slate-400 py-8 text-lg">
      No saved timetables yet. Save one to get started!
    </div>
  </div>
</div>

<script define:vars={{ classesBySheet }}>
  const form = document.getElementById('timetable-form');
  const sheetSelect = document.getElementById('sheet-select');
  const classSelect = document.getElementById('class-select');
  const saveBtn = document.getElementById('save-class-btn');
  const savedList = document.getElementById('saved-list');
  const noSavedMessage = document.getElementById('no-saved-message');

  sheetSelect.addEventListener('change', () => {
    const selectedSheet = sheetSelect.value;
    classSelect.innerHTML = '<option value="">-- Select a Class --</option>';

    if (selectedSheet && classesBySheet[selectedSheet]) {
      classesBySheet[selectedSheet].forEach(className => {
        const option = document.createElement('option');
        option.value = className;
        option.textContent = className;
        classSelect.appendChild(option);
      });
      classSelect.disabled = false;
    } else {
      classSelect.disabled = true;
    }
  });

  form.addEventListener('submit', (e) => {
    e.preventDefault();
    const sheet = sheetSelect.value;
    const className = classSelect.value;

    if (!sheet || !className) {
      alert('Please select both category and class');
      return;
    }

    window.location.href = `/timetable/${encodeURIComponent(sheet)}/${encodeURIComponent(className)}`;
  });

  saveBtn.addEventListener('click', () => {
    const sheet = sheetSelect.value;
    const className = classSelect.value;

    if (!sheet || !className) {
      alert('Please select both category and class first');
      return;
    }

    const savedTimetables = JSON.parse(localStorage.getItem('savedTimetables') || '[]');
    const newEntry = {
      sheet,
      className,
      url: `/timetable/${encodeURIComponent(sheet)}/${encodeURIComponent(className)}`,
      timestamp: Date.now()
    };

    const filtered = savedTimetables.filter((item) =>
      !(item.sheet === sheet && item.className === className)
    );
    filtered.push(newEntry);

    if (filtered.length > 5) {
      filtered.shift();
    }

    localStorage.setItem('savedTimetables', JSON.stringify(filtered));
    renderSavedTimetables();
    
    saveBtn.textContent = 'Saved!';
    setTimeout(() => {
      saveBtn.textContent = 'Save for Later';
    }, 2000);
  });

  function renderSavedTimetables() {
    const savedTimetables = JSON.parse(localStorage.getItem('savedTimetables') || '[]');
    savedList.innerHTML = '';

    if (savedTimetables.length === 0) {
      noSavedMessage.style.display = 'block';
      return;
    }

    noSavedMessage.style.display = 'none';

    savedTimetables.reverse().forEach((item, index) => {
      const div = document.createElement('div');
      div.className = 'flex items-center gap-2';
      
      const link = document.createElement('a');
      link.href = item.url;
      link.textContent = `${item.sheet} - ${item.className}`;
      link.className = 'flex-1 p-4 bg-slate-700/80 hover:bg-slate-600/80 rounded-xl text-blue-400 hover:text-blue-300 transition-all duration-200 font-medium text-lg';
      
      const deleteBtn = document.createElement('button');
      deleteBtn.textContent = 'Delete';
      deleteBtn.className = 'px-6 py-4 bg-red-600 hover:bg-red-700 rounded-xl transition-all duration-200 font-medium text-white shadow-lg hover:shadow-xl';
      deleteBtn.onclick = () => deleteSaved(index);
      
      div.appendChild(link);
      div.appendChild(deleteBtn);
      savedList.appendChild(div);
    });
  }

  function deleteSaved(index) {
    const savedTimetables = JSON.parse(localStorage.getItem('savedTimetables') || '[]');
    savedTimetables.reverse().splice(index, 1);
    localStorage.setItem('savedTimetables', JSON.stringify(savedTimetables.reverse()));
    renderSavedTimetables();
  }

  renderSavedTimetables();
</script>